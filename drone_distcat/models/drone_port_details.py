# coding: utf-8

"""
    icds

     Industrial Corridors Discovery Finder & Discovery Service. This service provides APIs to discover and manage industrial corridors and drone ports. It includes features for authentication, data management, and health checks. 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from drone_distcat.models.drone_port_type import DronePortType
from drone_distcat.models.drone_port_usage_type import DronePortUsageType
from typing import Optional, Set
from typing_extensions import Self

class DronePortDetails(BaseModel):
    """
    DronePortDetails
    """ # noqa: E501
    manufacturer: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=24)]] = None
    port_type: DronePortType
    latitude: Union[Annotated[float, Field(le=90, strict=True, ge=-90)], Annotated[int, Field(le=90, strict=True, ge=-90)]] = Field(description="ドローンポート中心緯度")
    longitude: Union[Annotated[float, Field(le=180, strict=True, ge=-180)], Annotated[int, Field(le=180, strict=True, ge=-180)]] = Field(description="ドローンポート中心経度")
    altitude: Union[Annotated[float, Field(le=100, strict=True, ge=0)], Annotated[int, Field(le=100, strict=True, ge=0)]] = Field(description="ドローンポート着陸面の高さ(対地高度)")
    supports_drone_type: Annotated[str, Field(strict=True, max_length=24)] = Field(description="対応機体。着陸可能な機体の種類等を設定")
    usage_type: DronePortUsageType
    url: StrictStr = Field(description="ドローンポートのURL")
    __properties: ClassVar[List[str]] = ["manufacturer", "port_type", "latitude", "longitude", "altitude", "supports_drone_type", "usage_type", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DronePortDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if manufacturer (nullable) is None
        # and model_fields_set contains the field
        if self.manufacturer is None and "manufacturer" in self.model_fields_set:
            _dict['manufacturer'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DronePortDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "manufacturer": obj.get("manufacturer"),
            "port_type": obj.get("port_type"),
            "latitude": obj.get("latitude"),
            "longitude": obj.get("longitude"),
            "altitude": obj.get("altitude"),
            "supports_drone_type": obj.get("supports_drone_type"),
            "usage_type": obj.get("usage_type"),
            "url": obj.get("url")
        })
        return _obj


