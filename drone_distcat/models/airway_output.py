# coding: utf-8

"""
    icds

     Industrial Corridors Discovery Finder & Discovery Service. This service provides APIs to discover and manage industrial corridors and drone ports. It includes features for authentication, data management, and health checks. 

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List
from drone_distcat.models.single_airway_output import SingleAirwayOutput
from typing import Optional, Set
from typing_extensions import Self

class AirwayOutput(BaseModel):
    """
    AirwayOutput
    """ # noqa: E501
    administrator_id: StrictStr
    business_number: StrictInt
    airways: List[SingleAirwayOutput]
    url: StrictStr
    __properties: ClassVar[List[str]] = ["administrator_id", "business_number", "airways", "url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AirwayOutput from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in airways (list)
        _items = []
        if self.airways:
            for _item_airways in self.airways:
                if _item_airways:
                    _items.append(_item_airways.to_dict())
            _dict['airways'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AirwayOutput from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "administrator_id": obj.get("administrator_id"),
            "business_number": obj.get("business_number"),
            "airways": [SingleAirwayOutput.from_dict(_item) for _item in obj["airways"]] if obj.get("airways") is not None else None,
            "url": obj.get("url")
        })
        return _obj


